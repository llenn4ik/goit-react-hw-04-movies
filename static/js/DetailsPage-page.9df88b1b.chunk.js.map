{"version":3,"sources":["components/services/API_themovidb.js","components/views/Cast.js","components/views/Reviews.js","components/views/DetailsPage.js"],"names":["axios","defaults","baseURL","API_KEY","fetchFilmReviews","movieId","a","get","url","then","res","data","fetchPopularFilms","fetch","json","fetchFilmDetails","fetchFilmWithQuery","searchQuery","fetchFilmActors","fetchActorsList","state","filmActors","this","props","match","params","API_themoviedb","cast","setState","map","id","profile_path","name","character","key","className","src","alt","Component","review","results","length","author","content","DetailsPage","aboutFilm","handleGoBack","location","from","history","push","routes","moviesPage","reviews","onClick","poster_path","title","original_title","Date","release_date","getFullYear","vote_average","overview","genres","to","pathname","path","component","Cast","Reviews"],"mappings":"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","file":"static/js/DetailsPage-page.9df88b1b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\r\n\r\nconst BaseApiMovies = \"https://api.themoviedb.org/3\";\r\n\r\nconst API_KEY = \"a15f9b7f27bd19853a969d23685d4c4f\";\r\n\r\nconst fetchPopularFilms = () => {\r\n  return fetch(\r\n    `${BaseApiMovies}/trending/movie/day?api_key=${API_KEY}`\r\n  ).then((res) => res.json());\r\n};\r\n\r\nconst fetchFilmWithQuery = (searchQuery) => {\r\n  return get(\r\n    `/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1&include_adult=false`\r\n  );\r\n};\r\n\r\nconst fetchFilmDetails = (movieId) => {\r\n  return get(`/movie/${movieId}?api_key=${API_KEY}`);\r\n};\r\n\r\nconst fetchFilmActors = (movieId) => {\r\n  return get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\r\n};\r\n\r\nconst fetchFilmReviews = async (movieId) => {\r\n  return get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\r\n};\r\n\r\nconst get = async (url) => {\r\n  try {\r\n    return axios.get(url).then((res) => res.data);\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport default {\r\n  fetchPopularFilms,\r\n  fetchFilmDetails,\r\n  fetchFilmWithQuery,\r\n  fetchFilmActors,\r\n  fetchFilmReviews,\r\n};","import React, { Component } from \"react\";\r\nimport API_themoviedb from \"../services/API_themovidb\";\r\n\r\nexport default class fetchActorsList extends Component {\r\n  state = { filmActors: [] };\r\n\r\n  componentDidMount() {\r\n    const { movieId } = this.props.match.params;\r\n    API_themoviedb.fetchFilmActors(movieId).then(({ cast }) =>\r\n      this.setState({ filmActors: cast })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { filmActors } = this.state;\r\n\r\n    return (\r\n      <ul>\r\n        {filmActors.map(({ id, profile_path, name, character }) => (\r\n          <li key={id}>\r\n            <img\r\n              className=\"photoActor\"\r\n              src={`http://image.tmdb.org/t/p/w500${profile_path}`}\r\n              alt=\"\"\r\n            />\r\n            <p>{name}</p>\r\n            <p>{character}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport API_themoviedb from \"../services/API_themovidb\";\r\n\r\nexport default class fetchActorsList extends Component {\r\n  state = { review: [] };\r\n\r\n  componentDidMount() {\r\n    const { movieId } = this.props.match.params;\r\n    API_themoviedb.fetchFilmReviews(movieId).then(({ results }) =>\r\n      this.setState({ review: results })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { review } = this.state;\r\n    return (\r\n      <>\r\n        {review.length === 0 && <p>We don't have any reviews for this movie</p>}\r\n        {review.length > 0 && (\r\n          <ul>\r\n            {review.map(({ id, author, content }) => (\r\n              <li key={id}>\r\n                <h2>{author}</h2>\r\n                <p>{content}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport { Link, Route } from \"react-router-dom\";\r\n\r\nimport API_themoviedb from \"../services/API_themovidb\";\r\nimport Cast from \"./Cast\";\r\nimport Reviews from \"./Reviews\";\r\nimport routes from \"../../routes\";\r\n\r\nexport default class DetailsPage extends Component {\r\n  state = {\r\n    aboutFilm: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { movieId } = this.props.match.params;\r\n    API_themoviedb.fetchFilmDetails(movieId).then((aboutFilm) =>\r\n      this.setState({ aboutFilm })\r\n    );\r\n  }\r\n\r\n  handleGoBack = () => {\r\n    const { state } = this.props.location;\r\n\r\n    if (state && state.from) {\r\n      return this.props.history.push(state.from);\r\n    }\r\n    this.props.history.push(routes.moviesPage);\r\n  };\r\n\r\n  render() {\r\n    const { aboutFilm } = this.state;\r\n    const { match, location } = this.props;\r\n    const { cast, reviews } = routes;\r\n    return (\r\n      <>\r\n        <button onClick={this.handleGoBack}> &#8656; Go back</button>\r\n        {aboutFilm && (\r\n          <div className=\"MovieDetails\">\r\n            <div className=\"MovieDetailsImage\">\r\n              <img\r\n                src={`http://image.tmdb.org/t/p/w500${aboutFilm.poster_path}`}\r\n                alt={aboutFilm.title}\r\n              />\r\n            </div>\r\n            <div className=\"MovieDetailsAbout\">\r\n              <h1>\r\n                {aboutFilm.original_title}(\r\n                {new Date(aboutFilm.release_date).getFullYear()})\r\n              </h1>\r\n              <p>User Scores: {aboutFilm.vote_average * 10}%</p>\r\n              <h2>Overview</h2>\r\n              <p>{aboutFilm.overview}</p>\r\n              <h2>Genres</h2>\r\n              <ul>\r\n                {aboutFilm.genres.map(({ id, name }) => (\r\n                  <li key={id}>{name}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <h2>Additional information</h2>\r\n          <ul className=\"addInformation\">\r\n            <li>\r\n              <Link\r\n                to={{\r\n                  pathname: `/movies/${match.params.movieId}/cast`,\r\n                  state: { from: location },\r\n                }}\r\n              >\r\n                Cast\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link\r\n                to={{\r\n                  pathname: `/movies/${match.params.movieId}/reviews`,\r\n                  state: { from: location },\r\n                }}\r\n              >\r\n                Reviews\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <Route path={cast} component={Cast} />\r\n          <Route path={reviews} component={Reviews} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}"],"sourceRoot":""}